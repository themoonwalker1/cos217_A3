Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Praneeth Bhandaru

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on Aarmlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.

Professor Moretti

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

The assignment was a great introduction to memory management and the
tools associated with it on arm-lab. It was also a good way to see
"OOP" in c. As we did similar structures in previous classes, it helped
to see the differences between c and other languages.

The challenge part was particularly hard because it required a lot of
debugging (faced memory management issues, segfaults, and infinite
loops).

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

No bugs.

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

Checking symtablelist.c

   symtablelist.c: line 85: medium priority:
   Do you want to validate 'pvValue' through an assert?

   /* I disagree with this warning, as pvValue should be allowed to be
      the null value (example given by Professor Moretti is that this
      structure can be used as a set by setting the "value" equal to
      null). */

   symtablelist.c: line 120: medium priority:
   Do you want to validate 'pvValue' through an assert?

   /* I disagree with this warning, as pvValue should be allowed to be
      the null value (example given by Professor Moretti is that this
      structure can be used as a set by setting the "value" equal to
      null). */

   symtablelist.c: line 225: medium priority:
   Do you want to validate 'pvExtra' through an assert?

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

Checking symtablehash.c

   symtablehash.c: line 194: medium priority:
   Do you want to validate 'pvValue' through an assert?

    /* I disagree with this warning, as pvValue should be allowed to be
      the null value (example given by Professor Moretti is that this
      structure can be used as a set by setting the "value" equal to
      null). */

   symtablehash.c: line 240: medium priority:
   Do you want to validate 'pvValue' through an assert?

    /* I disagree with this warning, as pvValue should be allowed to be
      the null value (example given by Professor Moretti is that this
      structure can be used as a set by setting the "value" equal to
      null). */

   symtablehash.c: line 355: medium priority:
   Do you want to validate 'pvExtra' through an assert?

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000062 seconds.
-- 500 bindings consumed 0.002723 seconds.
-- 5000 bindings consumed 0.138611 seconds.
-- 50000 bindings consumed 12.732849 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000055 seconds.
-- 500 bindings consumed 0.000373 seconds.
-- 5000 bindings consumed 0.003715 seconds.
-- 50000 bindings consumed 0.076387 seconds.
-- 500000 bindings consumed 12.064431 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000056 seconds.
-- 500 bindings consumed 0.000277 seconds.
-- 5000 bindings consumed 0.003364 seconds.
-- 50000 bindings consumed 0.026973 seconds.
-- 500000 bindings consumed 0.283705 seconds.
